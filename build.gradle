plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'com.gradleup.shadow' version '9.2.2'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	maven { url = "https://maven.google.com" }
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"infinite-craft" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	//Gson
	implementation 'com.google.code.gson:gson:2.10.1'

	//ChatGpt
	// modImplementation 'com.openai:openai-java:4.0.0'

	//Gemini
	implementation 'com.google.genai:google-genai:1.0.0'
	shadow 'com.google.genai:google-genai:1.0.0'
}

// import org.gradle.api.file.DuplicatesStrategy

// tasks.register('fatJar', Jar) {
//     group = 'build'
//     description = 'Assembles a jar containing only Google dependencies.'
//     dependsOn remapJar

//     archiveClassifier.set('fat')

//     // ✅ 仅包含以下 groupId 的依赖
//     def includeGroups = [
//         'com.google.genai',
//         'com.google.guava',
//         'com.google.auth',
//         'com.google.http-client'
//     ]

// 		from {
//         zipTree(tasks.remapJar.archiveFile.get().asFile)
//     }

//     from {
//         configurations.runtimeClasspath
//             .resolvedConfiguration
//             .resolvedArtifacts
//             .findAll { artifact ->
//                 includeGroups.contains(artifact.moduleVersion.id.group)
//             }
//             .collect { artifact ->
//                 zipTree(artifact.file).matching {
//                     include 'com/google/genai/**'
//                     include 'com/google/auth/**'
//                     include 'com/google/common/**'
//                     include 'com/google/api/client/**'
//                 }
//             }
//     }

//     // ✅ 把 mod 自身文件也一起打进去
//     with tasks.remapJar

//     // ✅ 解决重复文件冲突
//     duplicatesStrategy = DuplicatesStrategy.EXCLUDE
//     exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
//     exclude 'META-INF/INDEX.LIST'
// }

configurations {
	shadow {
			transitive = true
	}
}
import java.util.jar.JarFile
shadowJar {
    archiveClassifier.set('shadow')
    configurations = [project.configurations.shadow]

    from sourceSets.main.output
    from sourceSets.client.output

    // relocate
		doFirst {
        def seen = [] as Set
        def shadowConfig = project.configurations.shadow

        shadowConfig.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            def jarFile = artifact.file
            if (jarFile.name.endsWith('.jar') && jarFile.exists() && jarFile.isFile()) {
                try {
                    def jar = new JarFile(jarFile)
                    jar.entries().each { entry ->
                        def name = entry.name
                        if (name.endsWith('.class') && name.contains('/')) {
                            def parts = name.split('/')
                            if (parts.length >= 2) {
                                def rootPkg = parts[0..1].join('.')
                                if (!seen.contains(rootPkg)) {
                                    relocate rootPkg, "com.infinite_craft.libs.${rootPkg}"
                                    seen << rootPkg
                                }
                            }
                        }
                    }
                } catch (Exception e) {
                    println "⚠️ Failed to scan ${jarFile.name}: ${e.message}"
                }
            }
        }
    }

    mergeServiceFiles()
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
tasks.register('printShadowDeps') {
    doLast {
        println "=== Dependencies in shadowJar ==="

        // Shadow 9+ 的 API：configurations 是一个 Provider<Set<Configuration>>
        def configs = shadowJar.configurations.get()
        configs.each { conf ->
            conf.resolvedConfiguration.resolvedArtifacts.each { art ->
                println " -> ${art.moduleVersion.id.group}:${art.name}:${art.moduleVersion.id.version}"
            }
        }
    }
}

remapJar {
    dependsOn shadowJar
    input.set(shadowJar.archiveFile)
    archiveClassifier.set(null) // 让 remapJar 成为最终产物
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
	options.compilerArgs << "-Xlint:all" << "-Werror" << "-Xdiags:verbose"
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21

	toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

fabricApi {
	configureDataGeneration() {
		client = true
	}
}